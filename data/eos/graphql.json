[
  {
    "name": "Subscription",
    "hideChildren": false,
    "description": "",
    "fields": [
      {
        "name": "searchTransactionsForward",
        "type": {
          "reqType": true,
          "name": "SearchTransactionForwardResponse"
        },
        "description": "Search the blockchain forward for transaction *execution traces* based on `query`.\n\nWARN: always consider the `undo` field in forward searches, which signal that the matching element\nwas in fact REMOVED from the chain because of blocks reorganization.",
        "arguments": [
          {
            "name": "query",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower block num boundary, inclusively. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "highBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Higher block num boundary, inclusively. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`). A `null` value means no higher limits, therefore searching into the future of the chain."
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "0"
            },
            "description": "Limit the number of results streamed back."
          },
          {
            "name": "irreversibleOnly",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": "When true, only stream back results once they pass the irreversibility boundary. Otherwise, allow fetching results up to the head block."
          },
          {
            "name": "liveMarkerInterval",
            "type": {
              "name": "Uint32",
              "default": "0"
            },
            "description": "If non-zero, indicates you want to mark the stream when reaching live blocks. A marker is a response with a `trace` equal to `null`, which will be sent at each `liveMarkerInterval` blocks. The first `trace` to be equal to `null` in a stream indicates you are now processing live blocks.\n\nThe value for `liveMarkerInterval` is a number of blocks."
          }
        ]
      },
      {
        "name": "searchTransactionsBackward",
        "type": {
          "reqType": true,
          "name": "SearchTransactionBackwardResponse"
        },
        "description": "Search the blockchain backward for transaction execution traces based on `query`.\n\nNOTE: The `undo` field is not used in backwards search.",
        "arguments": [
          {
            "name": "query",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower block num boundary, inclusively. The absence of a value, or a value of 0 means the beginning of the chain. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "highBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Higher block num boundary, inclusively. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`), -1 being the head block."
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "0"
            },
            "description": "Limit the number of results streamed back."
          },
          {
            "name": "irreversibleOnly",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": "When true, only stream back results that have passed the irreversibility boundary. Otherwise, allow fetching results up to the head block."
          }
        ]
      }
    ]
  },
  {
    "name": "Query",
    "hideChildren": false,
    "description": "",
    "fields": [
      {
        "name": "getAccountHistoryActions",
        "type": {
          "reqType": true,
          "name": "AccountHistoryActionsConnection"
        },
        "description": "WARNING: This is a BETA Query. IT MIGHT STILL CHANGE.\n\nRetrieve the last actions, that are irreversible, and that:\n1) notified an account, or\n2) was authorized by an account.\n\nResults are _actions_, returned in reverse order (from recent to older actions).\n\nNOTE: usually, the backing service of this method holds a _truncated_ window of history, per account.\n\nRead the `cursor` in the response, and pass it back to `cursor` to continue paginating. This is a short-lived cursor, especially as the truncation window goes by.",
        "arguments": [
          {
            "name": "account",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "Account name to query for actions"
          },
          {
            "name": "contract",
            "type": {
              "name": "String"
            },
            "description": "Contract name to query for actions"
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "100"
            },
            "description": "Maximum number of actions returned in this page.  Max limit allowed for this call is 1000"
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Optional cursor to continue where you left off, taken from results of a previous call to this `getActions` query."
          }
        ]
      },
      {
        "name": "searchTransactionsForward",
        "type": {
          "reqType": true,
          "name": "SearchTransactionsForwardResponse"
        },
        "description": "Search the blockchain forward for transaction *execution traces* based on `query`.\n\nWhen the returned `cursor` is empty, it means you have reached the end of the specified block range.\n\nWARN: always consider the `undo` field in forward searches, which signal that the matching element was in fact REMOVED from the chain because of blocks reorganization.\n\nSee also the streaming version under `Subscription`",
        "arguments": [
          {
            "name": "query",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower block num boundary, inclusively. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "highBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Higher block num boundary, inclusively. A zero or negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "100"
            },
            "description": "Limit the number of results per page of results (defaults to 100)."
          },
          {
            "name": "irreversibleOnly",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": "When true, only stream back results once they pass the irreversibility boundary. Otherwise, allow fetching results up to the head block."
          }
        ]
      },
      {
        "name": "searchTransactionsBackward",
        "type": {
          "reqType": true,
          "name": "SearchTransactionsBackwardResponse"
        },
        "description": "Search the blockchain backward for transaction *execution traces* based on `query`.\n\nWhen the returned `cursor` is empty, it means you have reached the end of the specified block\nrange.\n\nSee also the streaming version under `Subscription`",
        "arguments": [
          {
            "name": "query",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower block num boundary, inclusively. A value of 0 means the beginning of the chain. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "highBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Higher block num boundary, inclusively. A zero or negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "100"
            },
            "description": "Limit the number of results per page of results (defaults to 100)."
          },
          {
            "name": "irreversibleOnly",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": "When true, only stream back results once they pass the irreversibility boundary. Otherwise, allow fetching results up to the head block."
          }
        ]
      },
      {
        "name": "blockIDByTime",
        "type": {
          "reqType": true,
          "name": "BlockIDResponse"
        },
        "description": "Return the block ID found around the given `time`, based on the `comparator` provided.",
        "arguments": [
          {
            "name": "time",
            "type": {
              "reqType": true,
              "name": "Time"
            },
            "description": "Timestamp for comparison, in format 2006-01-02T15:04:05Z or 2006-01-02T15:04:05.123Z"
          },
          {
            "name": "comparator",
            "type": {
              "name": "COMPARATOR",
              "default": "LTE"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "blockIDAtAccountCreation",
        "type": {
          "reqType": true,
          "name": "BlockIDResponse"
        },
        "description": "Return the block Number where given `account` was created.",
        "arguments": [
          {
            "name": "account",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "Query",
    "hideChildren": false,
    "description": "",
    "fields": [
      {
        "name": "block",
        "type": {
          "name": "Block"
        },
        "description": "ALPHA Get a single block by its ID or its number. You cannot specify both.",
        "arguments": [
          {
            "name": "id",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "num",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "tokens",
        "type": {
          "reqType": true,
          "name": "TokenConnection"
        },
        "description": "ALPHA Get a list of contract tokens (at Last Irreversible Block height (LIB) only)",
        "arguments": [
          {
            "name": "tokenSymbols",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "String"
            },
            "description": "List of token symbols (EOS) to filter the results against"
          },
          {
            "name": "tokenContracts",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "String"
            },
            "description": "List of token contracts (eosio.token) to filter the results against"
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Cursor used for pagination"
          },
          {
            "name": "limit",
            "type": {
              "name": "Uint32"
            },
            "description": "Maximum number of results to include in a result"
          },
          {
            "name": "sortField",
            "type": {
              "name": "TOKENS_SORT_FIELD",
              "default": "HOLDERS"
            },
            "description": "Token attribute used to sort the results"
          },
          {
            "name": "sortOrder",
            "type": {
              "name": "SORT_ORDER",
              "default": "DESC"
            },
            "description": "Direction in which to sort the results"
          }
        ]
      },
      {
        "name": "accountBalances",
        "type": {
          "reqType": true,
          "name": "AccountBalanceConnection"
        },
        "description": "Get a list of token balances for a specific account (at Last Irreversible Block height (LIB) only)",
        "arguments": [
          {
            "name": "account",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "The account whose balances you are retrieveing"
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Cursor used for pagination"
          },
          {
            "name": "tokenSymbols",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "String"
            },
            "description": "List of token symbols (EOS) to filter the results against"
          },
          {
            "name": "tokenContracts",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "String"
            },
            "description": "List of token contracts (eosio.token) to filter the results against"
          },
          {
            "name": "limit",
            "type": {
              "name": "Uint32"
            },
            "description": "Maximum number of results to include in a result"
          },
          {
            "name": "sortField",
            "type": {
              "name": "ACCOUNT_BALANCES_SORT_FIELD",
              "default": "AMOUNT"
            },
            "description": "Token attribute used to sort the results"
          },
          {
            "name": "sortOrder",
            "type": {
              "name": "SORT_ORDER",
              "default": "DESC"
            },
            "description": "Direction in which to sort the results"
          },
          {
            "name": "options",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "ACCOUNT_BALANCE_OPTION"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "tokenBalances",
        "type": {
          "reqType": true,
          "name": "AccountBalanceConnection"
        },
        "description": "Get a list of token balances for a specific contract & symbol (at Last Irreversible Block height (LIB) only)",
        "arguments": [
          {
            "name": "contract",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "The token's contract you are retrieving"
          },
          {
            "name": "symbol",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "The token's symbol you are retrieving"
          },
          {
            "name": "tokenHolders",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "String"
            },
            "description": "List of token holders to filter the results against"
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Cursor used for pagination"
          },
          {
            "name": "limit",
            "type": {
              "name": "Uint32"
            },
            "description": "Maximum number of results to include in a result"
          },
          {
            "name": "sortField",
            "type": {
              "name": "TOKEN_BALANCES_SORT_FIELD",
              "default": "AMOUNT"
            },
            "description": "Token attribute used to sort the results"
          },
          {
            "name": "sortOrder",
            "type": {
              "name": "SORT_ORDER",
              "default": "DESC"
            },
            "description": "Direction in which to sort the results"
          },
          {
            "name": "options",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "ACCOUNT_BALANCE_OPTION"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "Block",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "id",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "ID of this block. It is a unique pointer to this block.",
        "arguments": []
      },
      {
        "name": "num",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "Sequential number of this block on the chain. Unlike the hash, it is not unique because of forked blocks.",
        "arguments": []
      },
      {
        "name": "dposLIBNum",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "The Last Irreversible Block number this chain is based at the DPoS consensus layer.",
        "arguments": []
      },
      {
        "name": "irreversible",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Indicates whether this block is irreversible.",
        "arguments": []
      },
      {
        "name": "header",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "Header . It is a unique pointer to this block.",
        "arguments": []
      },
      {
        "name": "merkleRoot",
        "type": {
          "reqType": true,
          "name": "BlockRootMerkle"
        },
        "description": "Pointer to the incremental merkle root data structure for this block",
        "arguments": []
      },
      {
        "name": "executedTransactionCount",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "Number of transaction found in this blocks, this is the number of 'executed' transaction count.",
        "arguments": []
      },
      {
        "name": "transactionTraces",
        "type": {
          "reqType": true,
          "name": "TransactionTraceConnection"
        },
        "description": "List of transactions contained in this block.",
        "arguments": [
          {
            "name": "first",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "last",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "before",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "after",
            "type": {
              "name": "String"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "BlockHeader",
    "hideChildren": true,
    "description": "BlockHeader is the header of a block, excluding the transactions in that block.",
    "fields": [
      {
        "name": "id",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "The ID of this block in the chain.",
        "arguments": []
      },
      {
        "name": "num",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "The block number in the chain.",
        "arguments": []
      },
      {
        "name": "timestamp",
        "type": {
          "reqType": true,
          "name": "Time"
        },
        "description": "Timestamp of this block, this is the actual time at which the block was procuded.",
        "arguments": []
      },
      {
        "name": "producer",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "The block producer who producer this block.",
        "arguments": []
      },
      {
        "name": "confirmed",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "How may confirmations of verification this block has received from other block producers.",
        "arguments": []
      },
      {
        "name": "previous",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "The previous block ID in the block chain this block is based on.",
        "arguments": []
      },
      {
        "name": "transactionMRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "The transaction receipt Merkle root node hash of this block, this is the 'transaction_mroot' in EOSIO.",
        "arguments": []
      },
      {
        "name": "actionMRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "The action receipt Merkle root node hash of this block, this is the 'action_mroot' in EOSIO.",
        "arguments": []
      },
      {
        "name": "scheduleVersion",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "The producer schedule version this block is based on. The schedule is the list of active producer and their assigned block production slot.",
        "arguments": []
      },
      {
        "name": "newProducers",
        "type": {
          "name": "ProducerSchedule"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockRootMerkle",
    "hideChildren": true,
    "description": "BlockRootMerkle",
    "fields": [
      {
        "name": "nodeCount",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "The ID of this block in the chain.",
        "arguments": []
      },
      {
        "name": "activeNodes",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "ProducerSchedule",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "version",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "producers",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "ProducerKey"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "ProducerKey",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "producerName",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "blockSigningKey",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTraceConnection",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "edges",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "TransactionTraceEdge"
        },
        "description": "A list of edges to transaction traces",
        "arguments": []
      },
      {
        "name": "pageInfo",
        "type": {
          "reqType": true,
          "name": "PageInfo"
        },
        "description": "Information to aid pagination",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTraceEdge",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Trasaction trace cursor",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "reqType": true,
          "name": "TransactionTrace"
        },
        "description": "Trasaction trace",
        "arguments": []
      }
    ]
  },
  {
    "name": "PageInfo",
    "hideChildren": true,
    "description": "Cursors required to continue either forward or backwards from a list of paginated elements",
    "fields": [
      {
        "name": "startCursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "cursor of the first element of the list, use it to search in the opposite direction",
        "arguments": []
      },
      {
        "name": "endCursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "cursor of the last element of the list, use it to continue",
        "arguments": []
      },
      {
        "name": "hasNextPage",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "indicates whether there is a next page",
        "arguments": []
      },
      {
        "name": "hasPreviousPage",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "indicates whether there is a previous page",
        "arguments": []
      }
    ]
  },
  {
    "name": "SearchTransactionsForwardResponse",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "cursor",
        "type": {
          "name": "String"
        },
        "description": "This is a chain-wide cursor, indicating the progress of a search. You can pass it back to the different search methods to continue fetching more results, in *either directions* (even in the reverse direction). A `null` cursor means the end of range has been reached.",
        "arguments": []
      },
      {
        "name": "results",
        "type": {
          "isList": true,
          "reqType": true,
          "name": "SearchTransactionForwardResponse"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "SearchTransactionsBackwardResponse",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "results",
        "type": {
          "isList": true,
          "reqType": true,
          "name": "SearchTransactionBackwardResponse"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "SearchTransactionForwardResponse",
    "hideChildren": true,
    "description": "A single transaction trace response, matching a forward search query.\n\nWARNING: do NOT forget to include the `undo` field to determine if the message is actually a REVERSAL of the transaction.\n\nNOTE: always check the value of `trace.status` to make sure it is `executed` if you want to make sure a transaction made it to the chain.",
    "fields": [
      {
        "name": "undo",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this response is an UNDO operation of a previously sent response.\n\nIn a forward search, make sure you catch this and always verify its value.. as to not double or triple count transactions.",
        "arguments": []
      },
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Chain-wide cursor, allowing you to continue querying when connection is interrupted",
        "arguments": []
      },
      {
        "name": "isIrreversible",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether the block represented here is irreversible",
        "arguments": []
      },
      {
        "name": "irreversibleBlockNum",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "The last known irreversible block when processing this transaction.  This number can be equal to the current block num (under `trace.block.num`), in which case, `isIrreversible` is true.  In the reversible segment of the chain, this number will be drifting away by the number of blocks separating head block and LIB.",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "trace",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "Traces of execution of the transaction containing matching actions.\n\nCheck `matchingActions` below to limit the response to only actions matching your search query. Although, all actions from the transactions are available (see `executedActions`).",
        "arguments": []
      }
    ]
  },
  {
    "name": "SearchTransactionBackwardResponse",
    "hideChildren": true,
    "description": "A single transaction trace response, matching a backward search query.\n\nNOTE: always check the value of `trace.status` to make sure it is `executed` if you want to make sure a transaction made it to the chain.",
    "fields": [
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Chain-wide cursor, allowing you to continue querying when connection is interrupted",
        "arguments": []
      },
      {
        "name": "isIrreversible",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether the block represented here is irreversible",
        "arguments": []
      },
      {
        "name": "irreversibleBlockNum",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "The last known irreversible block when processing this transaction.  This number can be equal to the current block num (under `trace.block.num`), in which case, `isIrreversible` is true.  In the reversible segment of the chain, this number will be drifting away by the number of blocks separating head block and LIB.",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "trace",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "Traces of execution of the transaction containing matching actions.\n\nCheck `matchingActions` below to limit the response to only actions matching your search query. Although, all actions from the transactions are available (see `executedActions`).",
        "arguments": []
      }
    ]
  },
  {
    "name": "AccountHistoryActionsConnection",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "edges",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "SimpleActionTraceEdge"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "pageInfo",
        "type": {
          "reqType": true,
          "name": "PageInfo"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "SimpleActionTraceEdge",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "reqType": true,
          "name": "SimpleActionTrace"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "SimpleActionTrace",
    "hideChildren": true,
    "description": "SimpleActionTrace holds the traces of execution of a single action within a transaction, but contains less contextual information from the transaction than an ActionTrace.\n\nThis object is used with the `getActions` Query.",
    "fields": [
      {
        "name": "blockNum",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Block number in which this action was processed",
        "arguments": []
      },
      {
        "name": "blockID",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Block ID in which this action was processed.",
        "arguments": []
      },
      {
        "name": "blockTime",
        "type": {
          "reqType": true,
          "name": "Time"
        },
        "description": "Time at which the block was produced, according to the block producer",
        "arguments": []
      },
      {
        "name": "trxID",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Transaction ID originally holding this action",
        "arguments": []
      },
      {
        "name": "seq",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Global sequence ID for this action in this chain (shorthand for receipt.global_sequence).",
        "arguments": []
      },
      {
        "name": "executionIndex",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "Zero-based index of this action within the transaction, in _execution_ order.",
        "arguments": []
      },
      {
        "name": "receipt",
        "type": {
          "name": "ActionReceipt"
        },
        "description": "Action receipt (which differs from the Transaction receipt).\n\nThe receipt will be null when failures occur. Verify the `status`\nfield on the TransactionTrace object.",
        "arguments": []
      },
      {
        "name": "receiver",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Account which code was executed to produce this execution trace.\n\nShorthand for receipt.receiver",
        "arguments": []
      },
      {
        "name": "account",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Target method's account name.  This does *not* correspond to the contract code being executed, that is what `receiver` means.  This value namespaces your actions.\n\nShorthand for act.account in `nodeos` traces",
        "arguments": []
      },
      {
        "name": "name",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Target method's action name. This value, combined with the `account`, determines which code path will be executed in the `receiver` contract code.\n\nShorthand for act.name in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "authorization",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "PermissionLevel"
        },
        "description": "Signatories required to execute this action.\n\nShorthand for `act.authorization` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "data",
        "type": {
          "name": "JSON"
        },
        "description": "Data payload. Might be a string or a JSON object, depending on whether it was possible to unpack it using an ABI.\n\nShorthand for `act.data` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "json",
        "type": {
          "name": "JSON"
        },
        "description": "JSON Object representing the action parameters, decoded through the ABI. Will be `null` if it wasn't possible to decode it.\n\nShorthand for action.json",
        "arguments": []
      },
      {
        "name": "hexData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hex-encoded string representing the raw data for the action.\n\nShorthand for `act.hex_data` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "console",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Output of the action's `print()` statements from within the smart contract.",
        "arguments": []
      },
      {
        "name": "contextFree",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this action is a context-free action.",
        "arguments": []
      },
      {
        "name": "isNotify",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this action is a notification, meaning that it was triggered as a side effect rom another contract, and copied the exact same payload from the original transaction.  This happens when you call the `require_notify` method from the EOSIO intrinsics (from within a smart-contract).",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTrace",
    "hideChildren": true,
    "description": "Traces of the execution of a given transaction. This means the\ntransaction was executed on the chain. You also get context about the\nblock in which it was executed, and the status of the execution.\n\nWARN: Make sure to always check the `status` (in the `receipt`) to\nmake sure you're not considering a failed transaction as if it was\nsuccessful.",
    "fields": [
      {
        "name": "id",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "Block in which this transaction trace occurred",
        "arguments": []
      },
      {
        "name": "status",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATUS"
        },
        "description": "This is a short-hand for `receipt.status`.",
        "arguments": []
      },
      {
        "name": "receipt",
        "type": {
          "reqType": true,
          "name": "TransactionReceiptHeader"
        },
        "description": "Transaction execution receipt which is the consensus value propagated across the network.",
        "arguments": []
      },
      {
        "name": "elapsed",
        "type": {
          "reqType": true,
          "name": "Int64"
        },
        "description": "Amount of execution time in microseconds (µs) elapsed by this whole transaction. This\ncorresponds to the `transaction_trace.elapsed` field in the EOSIO software.\n\nWARN: This is **not** the propagated consensus value. This value is from the EOSIO node\nthat replayed the transaction from the network. Use `receipt.cpuUsageMicroSeconds` in your\nGraphQL operation instead to retrieve the consensus value.",
        "arguments": []
      },
      {
        "name": "netUsage",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Amount of network bandwidth consumed (for the sake of the rate limiting engine) by this whole transaction, in\nbytes. This corresponds to the `transaction_trace.net_usage` field in the EOSIO software (which is usually\nequivalent to `receipt.net_usage_words * 8`).\n\nWARN: This is **not** the propagated consensus value. This value is from the EOSIO node\nthat replayed the transaction from the network. While there is no reason to not match the\nconsensus value, it still could be different.  Use `receipt.netUsageWords` in your\nGraphQL operation instead to retrieve the consensus value (multiple it by 8 to get the amount of\nbytes).",
        "arguments": []
      },
      {
        "name": "scheduled",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this transaction was originally a scheduled transaction.",
        "arguments": []
      },
      {
        "name": "executedActions",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "ActionTrace"
        },
        "description": "Lists all action traces, flattened and ordered by execution time.",
        "arguments": []
      },
      {
        "name": "matchingActions",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "ActionTrace"
        },
        "description": "Returns a flattened list of action traces, in _execution_ order, of only the matching transactions (from a search, or other filtering).",
        "arguments": []
      },
      {
        "name": "topLevelActions",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "ActionTrace"
        },
        "description": "Traces of actions at depth=0, those part of the original Transaction. In `nodeos` version 1.7.0 and below, this corresponds to the `action_traces` field.",
        "arguments": []
      },
      {
        "name": "exceptJSON",
        "type": {
          "name": "JSON"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionReceiptHeader",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "status",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATUS"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "cpuUsageMicroSeconds",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "netUsageWords",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "ActionTrace",
    "hideChildren": true,
    "description": "ActionTrace holds the traces of execution of a single action within a transaction.",
    "fields": [
      {
        "name": "seq",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Global sequence ID for this action in this chain (shorthand for receipt.global_sequence). NOTE: if this is a failed action, seq will be 0.",
        "arguments": []
      },
      {
        "name": "executionIndex",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "Zero-based index of this action within the transaction, in _execution_ order.",
        "arguments": []
      },
      {
        "name": "receipt",
        "type": {
          "name": "ActionReceipt"
        },
        "description": "Action receipt (which differs from the Transaction receipt).\n\nThe receipt will be null when failures occur. Verify the `status`\nfield on the TransactionTrace object.",
        "arguments": []
      },
      {
        "name": "receiver",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Account which code was executed to produce this execution trace.\n\nShorthand for receipt.receiver",
        "arguments": []
      },
      {
        "name": "account",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Target method's account name.  This does *not* correspond to the contract code being executed, that is what `receiver` means.  This value namespaces your actions.\n\nShorthand for act.account in `nodeos` traces",
        "arguments": []
      },
      {
        "name": "name",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Target method's action name. This value, combined with the `account`, determines which code path will be executed in the `receiver` contract code.\n\nShorthand for act.name in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "authorization",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "PermissionLevel"
        },
        "description": "Signatories required to execute this action.\n\nShorthand for `act.authorization` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "data",
        "type": {
          "name": "JSON"
        },
        "description": "Data payload. Might be a string or a JSON object, depending on whether it was possible to unpack it using an ABI.\n\nShorthand for `act.data` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "json",
        "type": {
          "name": "JSON"
        },
        "description": "JSON Object representing the action parameters, decoded through the ABI. Will be `null` if it wasn't possible to decode it.\n\nShorthand for action.json",
        "arguments": []
      },
      {
        "name": "hexData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hex-encoded string representing the raw data for the action.\n\nShorthand for `act.hex_data` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "ramOps",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "RAMOp"
        },
        "description": "A list of RAM mutation operations, produced by this transaction.\n\nNOTE: the RAM ops on an action never include operations that are mutations of the transaction itself (like creation of a deferred, or removal of a deferred from RAM). For this, check `ramOps` on the TransactionTrace object.",
        "arguments": []
      },
      {
        "name": "dtrxOps",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "DTrxOp"
        },
        "description": "A list of all operations affecting deferred transactions, like creation, deletion, modification, produced by this action.",
        "arguments": []
      },
      {
        "name": "tableOps",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "TableOp"
        },
        "description": "A list of table mutation operations (creation or deletion of a _table_, not a _row_).",
        "arguments": []
      },
      {
        "name": "dbOps",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "DBOp"
        },
        "description": "A list of database operations produced by this action. Insertions, modifications and deletions of any table _rows_ in the scope of this action's `receiver`.",
        "arguments": [
          {
            "name": "code",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "table",
            "type": {
              "name": "String"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "console",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Output of the action's `print()` statements from within the smart contract.",
        "arguments": []
      },
      {
        "name": "contextFree",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this action is a context-free action.",
        "arguments": []
      },
      {
        "name": "elapsed",
        "type": {
          "reqType": true,
          "name": "Int64"
        },
        "description": "Elapsed time between the beginning of the execution of this action, relative to the time the whole transaction started to be processed",
        "arguments": []
      },
      {
        "name": "exceptJSON",
        "type": {
          "name": "JSON"
        },
        "description": "If non-null, this action failed. The stack and reasons will be found within the raw JSON payload provided.",
        "arguments": []
      },
      {
        "name": "isNotify",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this action is a notification, meaning that it was triggered as a side effect rom another contract, and copied the exact same payload from the original transaction.  This happens when you call the `require_notify` method from the EOSIO intrinsics (from within a smart-contract).",
        "arguments": []
      },
      {
        "name": "isMatchingQuery",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether or not this action matched the dfuse search query",
        "arguments": []
      },
      {
        "name": "createdActions",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "ActionTrace"
        },
        "description": "Traces of actions _created_ by this action. WARN: this doesn't infer that the operations were written to the blockchain in this order, only that it was created by this action. To obtain execution order, see `executedActions` on the TransactionTrace object.",
        "arguments": [
          {
            "name": "sort",
            "type": {
              "name": "ACTION_SORT_ORDER",
              "default": "EXECUTION"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "creatorAction",
        "type": {
          "name": "ActionTrace"
        },
        "description": "Trace of the action that created this one, the one which _created_ this action. WARN: it is not necessarily the parent in execution order, but will reflect which smart contract did the creation of either the notification, action or context_free_action.",
        "arguments": []
      },
      {
        "name": "closestUnnotifiedAncestorAction",
        "type": {
          "name": "ActionTrace"
        },
        "description": "Use this to rebuild the execution tree, using the `nodeos` dispatch algorithm of notifications, actions and context-free actions.\n\nThis is similar to what you would have gotten in `nodeos` prior to version 1.8.0.",
        "arguments": []
      }
    ]
  },
  {
    "name": "RAMOp",
    "hideChildren": true,
    "description": "Represents a change in consumption of RAM for a given account",
    "fields": [
      {
        "name": "operation",
        "type": {
          "reqType": true,
          "name": "RAM_OPERATION"
        },
        "description": "What happened to justify this change in RAM.",
        "arguments": []
      },
      {
        "name": "payer",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "The account being debited or credited RAM",
        "arguments": []
      },
      {
        "name": "delta",
        "type": {
          "reqType": true,
          "name": "Int64"
        },
        "description": "Number of bytes that were either consumed (positive) or released (negative)",
        "arguments": []
      },
      {
        "name": "usage",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Number of bytes now used by the `payer` account, after applying this RAM operation.\n\nTo have a precise view of the RAM left on an account after this transaction was applied, go through all actions in execution order (`TransactionTrace.executedActions`) and use the last RAMOp for the given account.",
        "arguments": []
      }
    ]
  },
  {
    "name": "DTrxOp",
    "hideChildren": true,
    "description": "A change in deferred transactions in the chain's memory.",
    "fields": [
      {
        "name": "operation",
        "type": {
          "reqType": true,
          "name": "DTRX_OPERATION"
        },
        "description": "The source or cause of creation/modification/deletion of a deferred transaction",
        "arguments": []
      },
      {
        "name": "sender",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "senderID",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "payer",
        "type": {
          "name": "String"
        },
        "description": "The account being debited or credited to store this deferred transaction",
        "arguments": []
      },
      {
        "name": "publishedAt",
        "type": {
          "name": "Time"
        },
        "description": "The time this deferred was published at",
        "arguments": []
      },
      {
        "name": "delayUntil",
        "type": {
          "name": "Time"
        },
        "description": "The time at which Block Producers will start attempting to execute this transaction",
        "arguments": []
      },
      {
        "name": "expirationAt",
        "type": {
          "name": "Time"
        },
        "description": "The time at which Block Producers will evict this transaction from memory if it fails execution.",
        "arguments": []
      },
      {
        "name": "trxID",
        "type": {
          "name": "String"
        },
        "description": "The transaction ID of the `transaction`",
        "arguments": []
      },
      {
        "name": "transaction",
        "type": {
          "name": "Transaction"
        },
        "description": "The deferred transaction payload itself.",
        "arguments": []
      }
    ]
  },
  {
    "name": "TableOp",
    "hideChildren": true,
    "description": "Creation or deletion of a table",
    "fields": [
      {
        "name": "operation",
        "type": {
          "reqType": true,
          "name": "TABLE_OPERATION"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "table",
        "type": {
          "reqType": true,
          "name": "TableOpKey"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "DBOp",
    "hideChildren": true,
    "description": "Represents the change delta of a row, in a contract table.\n\nThe `operation` field can be used to determine what happened\nto the row. Was is just inserted, modified or deleted?",
    "fields": [
      {
        "name": "operation",
        "type": {
          "reqType": true,
          "name": "DB_OPERATION"
        },
        "description": "The `operation` type should be referred to when inspecting the `oldData`, `oldJSON`, `newData`, `newJSON`\nfields. The `operation`'s value will determine what those value will contain.\n\nAssume the following example fields values (for brievity and clarity, we show the `oldJSON`\nand the `newJSON` fields, but the concept applies equally to `oldData` and `newData` which\nare the Hexadecimal binary version of the JSON):\n\n```\n   { operation: \"INS\", newJSON: { \"id\":1, \"name\": \"john\" }, oldJSON: <nil> } }\n   { operation: UPD, newJSON: { \"id\":1, \"name\": \"johnny\"}, oldJSON: { \"id\":1, \"name\": \"john\" } }\n   { operation: REM, newJSON: <nil>, oldJSON: { \"id\":1, \"name\": \"johnny\" } }\n```\n\nWhen the `operation` type is `\"INS\"`, the `oldJSON` will be `null`, since it's a new row,\nit cannot have a previous state, the `newJSON` will be set with the new value just inserted.\n\nWhen the `operation` type is `\"UPD\"`, the `newJSON` will contain the new row's value after\nthe update while the `oldJSON` will be set with the value the row had before being updated.\n\nWhen the `operation` type is `\"REM\"`, the `newJSON` will be `null`, since it's a deleted row,\nno new state exists, the `oldJSON` will be set with the value the row had before being\ndeleted.",
        "arguments": []
      },
      {
        "name": "oldPayer",
        "type": {
          "name": "String"
        },
        "description": "Previous paying account.  This is null in the case of an insertion.",
        "arguments": []
      },
      {
        "name": "newPayer",
        "type": {
          "name": "String"
        },
        "description": "New paying account.  This is null in the case of a deletion.",
        "arguments": []
      },
      {
        "name": "key",
        "type": {
          "reqType": true,
          "name": "DBOpKey"
        },
        "description": "Primary key of the row in the table.",
        "arguments": []
      },
      {
        "name": "oldData",
        "type": {
          "name": "String"
        },
        "description": "Contents (hex data) of the row before a REM or UPD operation.",
        "arguments": []
      },
      {
        "name": "newData",
        "type": {
          "name": "String"
        },
        "description": "Contents (hex data) of the row after an INS or UPD operation.",
        "arguments": []
      },
      {
        "name": "oldJSON",
        "type": {
          "reqType": true,
          "name": "DecodedObject"
        },
        "description": "Decoded version of oldData",
        "arguments": []
      },
      {
        "name": "newJSON",
        "type": {
          "reqType": true,
          "name": "DecodedObject"
        },
        "description": "Decoded version of newData",
        "arguments": []
      }
    ]
  },
  {
    "name": "DBOpKey",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "code",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "table",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "scope",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "UINT64_ENCODING",
              "default": "NAME"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "key",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "UINT64_ENCODING",
              "default": "NAME"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "TableOpKey",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "code",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "table",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "scope",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "UINT64_ENCODING",
              "default": "NAME"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "ActionReceipt",
    "hideChildren": true,
    "description": "Execution receipt for a given ActionTrace.\n\nThe `nodeos` field `auth_sequence` is not yet present. Contact us if you need it.",
    "fields": [
      {
        "name": "receiver",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Account for which code is being triggered. Beware that this might not be the same value as `account`, or the target account of the action, in the case of notifications. See documentation for `require_notify` in EOSIO contracts",
        "arguments": []
      },
      {
        "name": "digest",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hash of the action payload. Also known as `act_digest` from `nodeos`",
        "arguments": []
      },
      {
        "name": "globalSequence",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Globally unique sequence number in all actions from the longest chain. This will never be reused, and is guaranteed to monotonically increment with each action.\n\nThis property can be relied on to keep track of forks in your database, at the action level.\n\nWARNING: when micro-forks happens, global sequences from the different forks will be reused, but will be associated with other actions. This is why it's important to navigate forks properly.",
        "arguments": []
      },
      {
        "name": "codeSequence",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "abiSequence",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Transaction",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "expiration",
        "type": {
          "reqType": true,
          "name": "Time"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "refBlockNum",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "TaPoS reference block num.\n\nThis value holds only 16 bits of the blockNum (instead of 32).\nThe other 16 bits are in the current blockNum (unless overflown).",
        "arguments": []
      },
      {
        "name": "refBlockPrefix",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "TaPoS block prefix (bytes 8-16 of the block ID), in order to identify the correct fork for a given block number.",
        "arguments": []
      },
      {
        "name": "maxNetUsageWords",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "maxCPUUsageMS",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "delaySec",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "contextFreeActions",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "Action"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "actions",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "Action"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Action",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "account",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "name",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "authorization",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "PermissionLevel"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "json",
        "type": {
          "name": "JSON"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "data",
        "type": {
          "name": "JSON"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "hexData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "PermissionLevel",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "actor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "permission",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "AuthSequence",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "account",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "sequence",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "DecodedObject",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "object",
        "type": {
          "name": "JSON"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "error",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockIDResponse",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "time",
        "type": {
          "reqType": true,
          "name": "Time"
        },
        "description": "\"true\" if a block id was found",
        "arguments": []
      },
      {
        "name": "num",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "id",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TokenConnection",
    "hideChildren": true,
    "description": "The Connection type for a Token",
    "fields": [
      {
        "name": "blockRef",
        "type": {
          "name": "BlockRef"
        },
        "description": "`block` is the block at which the token data is valid",
        "arguments": []
      },
      {
        "name": "edges",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "TokenEdge"
        },
        "description": "A list of edges to tokens",
        "arguments": []
      },
      {
        "name": "pageInfo",
        "type": {
          "name": "PageInfo"
        },
        "description": "Information to aid pagination",
        "arguments": []
      }
    ]
  },
  {
    "name": "TokenEdge",
    "hideChildren": true,
    "description": "A single Token response.",
    "fields": [
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "See https://docs.dfuse.eosnation.io/eosio/public-apis/reference/search/cursors",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "reqType": true,
          "name": "Token"
        },
        "description": "The Token object.",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockRef",
    "hideChildren": true,
    "description": "A single Block response.",
    "fields": [
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Sequential number of this block on the chain.",
        "arguments": []
      },
      {
        "name": "id",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Token",
    "hideChildren": true,
    "description": "A single Token",
    "fields": [
      {
        "name": "contract",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Contract that created the token i.e.: eosio.token",
        "arguments": []
      },
      {
        "name": "symbol",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Symbol of token  i.e.: EOS",
        "arguments": []
      },
      {
        "name": "precision",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "Token precision",
        "arguments": []
      },
      {
        "name": "issuer",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Token contract issuer: eosio",
        "arguments": []
      },
      {
        "name": "holders",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Number of token holders",
        "arguments": []
      },
      {
        "name": "maximumSupply",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Token's maximum supply",
        "arguments": [
          {
            "name": "format",
            "type": {
              "name": "ASSET_FORMAT",
              "default": "ASSET"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "totalSupply",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Token's total supply",
        "arguments": [
          {
            "name": "format",
            "type": {
              "name": "ASSET_FORMAT",
              "default": "ASSET"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "AccountBalanceConnection",
    "hideChildren": true,
    "description": "The Connection type for a Account Balance",
    "fields": [
      {
        "name": "blockRef",
        "type": {
          "name": "BlockRef"
        },
        "description": "`block` is the block at which the token data is valid",
        "arguments": []
      },
      {
        "name": "edges",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "AccountBalanceEdge"
        },
        "description": "A list of edges to account balances",
        "arguments": []
      },
      {
        "name": "pageInfo",
        "type": {
          "name": "PageInfo"
        },
        "description": "Information to aid pagination",
        "arguments": []
      }
    ]
  },
  {
    "name": "AccountBalanceEdge",
    "hideChildren": true,
    "description": "A single Token response.",
    "fields": [
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "See https://docs.dfuse.eosnation.io/eosio/public-apis/reference/search/cursors",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "reqType": true,
          "name": "AccountBalance"
        },
        "description": "The account balance object.",
        "arguments": []
      }
    ]
  },
  {
    "name": "AccountBalance",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "contract",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Contract that created the token i.e.: eosio.token",
        "arguments": []
      },
      {
        "name": "account",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Account holding the token",
        "arguments": []
      },
      {
        "name": "symbol",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Symbol of token  i.e.: EOS",
        "arguments": []
      },
      {
        "name": "precision",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "Token precision",
        "arguments": []
      },
      {
        "name": "balance",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Amount of the token held in the account",
        "arguments": [
          {
            "name": "format",
            "type": {
              "name": "ASSET_FORMAT",
              "default": "ASSET"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "PageInfo",
    "hideChildren": true,
    "description": "Cursors required to continue either forward or backwards from a list of paginated elements",
    "fields": [
      {
        "name": "startCursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "cursor of the first element of the list, use it to search in the opposite direction",
        "arguments": []
      },
      {
        "name": "endCursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "cursor of the last element of the list, use it to continue",
        "arguments": []
      },
      {
        "name": "hasNextPage",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "indicates whether there is a next page",
        "arguments": []
      },
      {
        "name": "hasPreviousPage",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "indicates whether there is a previous page",
        "arguments": []
      }
    ]
  }
]
