[
  {
    "name": "Subscription",
    "hideChildren": false,
    "description": "",
    "fields": [
      {
        "name": "blocks",
        "type": {
          "reqType": true,
          "name": "BlockEdge"
        },
        "description": "Listen to a stream of blocks as they come in.\nWARN: always consider the `undo` field in forward searches, which signal that the matching element\n(a block) was in fact REMOVED from the chain because of blocks reorganization.",
        "arguments": [
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower block num boundary, inclusive. A negative value means a block relative to the head block. Omitting this value means unbounded (since the genesis block)."
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Opaque data piece that you can pass back to continue your stream if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call."
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "0"
            },
            "description": "Limit the number of results streamed back. 0 means unlimited"
          }
        ]
      },
      {
        "name": "searchTransactions",
        "type": {
          "reqType": true,
          "name": "TransactionEdge"
        },
        "description": "Search the blockchain forward for transaction *execution traces* based on `query`.\nSee: https://docs.dfuse.io/guides/core-concepts/search-query-language\n\nWARN: always consider the `undo` field in forward searches, which signal that the matching element\nwas in fact REMOVED from the chain because of blocks reorganization.  The `undo` field is always `false` in backward searches.",
        "arguments": [
          {
            "name": "indexName",
            "type": {
              "reqType": true,
              "name": "TRANSACTIONS_INDEX_NAME"
            },
            "description": ""
          },
          {
            "name": "query",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower block num boundary, inclusive. A negative value means a block relative to the head block. Omitting this value means unbounded (since the genesis block)."
          },
          {
            "name": "highBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Higher block num boundary, inclusive. A value of 0 means live-searching on any incoming blocks (the default behavior). A negative value means a block relative to the head block, ex: -1 means the head block, -2 means the second to last block, etc.."
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "0"
            },
            "description": "Limit the number of results streamed back. 0 means unlimited"
          },
          {
            "name": "sort",
            "type": {
              "name": "SORT",
              "default": "ASC"
            },
            "description": "From which end to start. ASC means from the past, going into the future. DESC means recent to older transactions."
          },
          {
            "name": "liveMarkerInterval",
            "type": {
              "name": "Uint32",
              "default": "0"
            },
            "description": "If non-zero, indicates you want to mark the stream when reaching live blocks. A marker is a response with a `trace` equal to `null`, which will be sent at each `liveMarkerInterval` blocks. The first `trace` to be equal to `null` in a stream indicates you are now processing live blocks.\n\nThe value for `liveMarkerInterval` is a number of blocks."
          }
        ]
      },
      {
        "name": "transactions",
        "type": {
          "reqType": true,
          "name": "TransactionState"
        },
        "description": "Subscribe to transactions for which the addresses match one of the match field\nprovided. Assuming a list of addresses and a `matchAnyOf` value `[FROM, TO]`, you would\nreceive all transaction for which one of the `from` or `to` field matches one of the address\nfound in the `addresses` list.",
        "arguments": [
          {
            "name": "addresses",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "String"
            },
            "description": "list of ETH addresses that you want to subscribe to"
          },
          {
            "name": "matchAnyOf",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "TRANSACTION_MATCH_FIELD"
            },
            "description": "fields to match against the list of addresses"
          },
          {
            "name": "maxConfirmations",
            "type": {
              "name": "Uint32",
              "default": "8"
            },
            "description": "number of 'Confirmation' transitions for a matching transaction, once they are in a block (defaults to 8, set to 0 to disable those transitions)"
          }
        ]
      },
      {
        "name": "transactionLifecycle",
        "type": {
          "reqType": true,
          "name": "TransactionState"
        },
        "description": "Subscribe to a transaction to follow its lifecycle (inclusion in a block, confirmations, etc.).\nThe transaction can be in an `unknown` or `pending` state at the time of the request\nSee https://docs.dfuse.io/guides/ethereum/concepts/trx_lifecycle/",
        "arguments": [
          {
            "name": "hash",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "hash of the transaction you want to track the state"
          }
        ]
      }
    ]
  },
  {
    "name": "Subscription",
    "hideChildren": false,
    "description": "",
    "fields": [
      {
        "name": "_alphaPendingTransactions",
        "type": {
          "reqType": true,
          "name": "Transaction"
        },
        "description": "",
        "arguments": [
          {
            "name": "filterAddresses",
            "type": {
              "isList": true,
              "reqType": true,
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "filterField",
            "type": {
              "name": "FILTER_FIELD",
              "default": "FROM_OR_TO"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "Query",
    "hideChildren": false,
    "description": "",
    "fields": [
      {
        "name": "block",
        "type": {
          "name": "Block"
        },
        "description": "Get a single block by its hash",
        "arguments": [
          {
            "name": "hash",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "blockByNumber",
        "type": {
          "name": "Block"
        },
        "description": "Get a single block by its number",
        "arguments": [
          {
            "name": "number",
            "type": {
              "reqType": true,
              "name": "Uint64"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "execute",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "Speculatively execute a transaction and get back the TransactionTrace it produced. If a hash is provided, it is used directly to speculatively execute the transaction. If only call details are provided, they are use to craft a transaction and speculatively execute it. If hash and call details are provided, the transaction is the one identified by hash and provided call details override fields in the transaction.",
        "arguments": [
          {
            "name": "hash",
            "type": {
              "name": "String"
            },
            "description": "The hash of a transaction to speculatively execute. When provided, retrieve the transaction information from it and speculatively execute it."
          },
          {
            "name": "from",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "to",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "input",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "gasLimit",
            "type": {
              "name": "Uint64"
            },
            "description": ""
          },
          {
            "name": "gasPrice",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "value",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "atBlock",
            "type": {
              "name": "BlockRef"
            },
            "description": "`BlockRef` defines against which block height the execution should be performed against, optional, if not present, use HEAD block (as seen by dfuse). For best precision, use the `hash`. Passing only the num will use the longest block chain for this block number."
          }
        ]
      },
      {
        "name": "transaction",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "Get a single transaction by its hash",
        "arguments": [
          {
            "name": "hash",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "searchTransactions",
        "type": {
          "reqType": true,
          "name": "TransactionConnection"
        },
        "description": "Search the blockchain forward for transaction *execution traces* based on `query`.\nSee: https://docs.dfuse.io/guides/core-concepts/search-query-language\n\nWARN: always consider the `undo` field in forward searches, which signal that the matching element\nwas in fact REMOVED from the chain because of blocks reorganization.  The `undo` field is always `false` in backward searches.",
        "arguments": [
          {
            "name": "indexName",
            "type": {
              "reqType": true,
              "name": "TRANSACTIONS_INDEX_NAME"
            },
            "description": "The index that will be queried (CALLS or LOGS), see https://docs.dfuse.io/reference/ethereum/search-terms/"
          },
          {
            "name": "query",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "See https://docs.dfuse.io/guides/core-concepts/search-query-language"
          },
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower boundary for search. Use -1 for HEAD. See https://docs.dfuse.io/guides/ethereum/concepts/search-ranges/"
          },
          {
            "name": "highBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Upper boundary for search. Use -1 for HEAD. See https://docs.dfuse.io/guides/ethereum/concepts/search-ranges/"
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "See https://docs.dfuse.io/guides/core-concepts/cursors/"
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "100"
            },
            "description": "Maximum number of results to include in a result"
          },
          {
            "name": "sort",
            "type": {
              "name": "SORT",
              "default": "ASC"
            },
            "description": "Direction in which to perform the search"
          }
        ]
      }
    ]
  },
  {
    "name": "PageInfo",
    "hideChildren": true,
    "description": "Cursors required to continue either forward or backwards from a list of paginated elements",
    "fields": [
      {
        "name": "startCursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "cursor of the first element of the list, use it to search in the opposite direction",
        "arguments": []
      },
      {
        "name": "endCursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "cursor of the last element of the list, use it to continue",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionConnection",
    "hideChildren": true,
    "description": "The Connection type for a Transaction. See the [GraphQL core concepts](https://docs.dfuse.io/guides/core-concepts/graphql/)",
    "fields": [
      {
        "name": "edges",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "TransactionEdge"
        },
        "description": "A list of edges to transactions",
        "arguments": []
      },
      {
        "name": "pageInfo",
        "type": {
          "reqType": true,
          "name": "PageInfo"
        },
        "description": "Information to aid pagination",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionEdge",
    "hideChildren": true,
    "description": "A single transaction response.\n\nWARNING: when doing forward streaming searches, do NOT forget to include the `undo` field to determine if the message is actually a REVERSAL of the transaction.\n\nNOTE: always check the value of `node.status` to make sure it is successfully executed before assuming it is.",
    "fields": [
      {
        "name": "undo",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this response is an UNDO operation of a previously sent response.\n\nIn a forward search, make sure you catch this and always verify its value.. as to not double/triple count transactions.\n\nIn a backward searches, `undo` will always be `false`.",
        "arguments": []
      },
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Query cursor, allowing you to continue fetching results even after interruption of your connection, without missing a beat.",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "reqType": true,
          "name": "BlockRefWithHeader"
        },
        "description": "`block` is the block in which this transaction was mined",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "The TransactionTrace object.",
        "arguments": []
      }
    ]
  },
  {
    "name": "Method",
    "hideChildren": true,
    "description": "Contains raw & decoded (if available) information about the smart contract method invoked by this transaction or EVM call.",
    "fields": [
      {
        "name": "hexSignature",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`hexSignature` is the first 4 bytes of the inputData which represents the smart contract method signature. If hexSignature is empty or less than 4 bytes long, it will return as `0x`.",
        "arguments": []
      },
      {
        "name": "textSignature",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`textSignature` is the method signature in text form as recognized by a key/value lookup. The key is the first 4 bytes of the input data. If method signature is not found in common signatures table, textSignature will return as empty string.",
        "arguments": []
      }
    ]
  },
  {
    "name": "Transaction",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "to",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`to` is the recipient address of a transfer, or target contract of a call.  [VERIFY: will be empty for contract-creating calls / if untrue, resurface the `create: true` variable like in a TransactioNTrace for consistency.]",
        "arguments": []
      },
      {
        "name": "nonce",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`nonce` is an ever incrementing counter of transactions issued by the `from` account.",
        "arguments": []
      },
      {
        "name": "gasPrice",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`gasPrice` is the price offered to miners for gas, in wei per unit.",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "gasLimit",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`gasLimit` is the maximum amount of gas this transaction can consume. Other Ethereum nodes often name this field simply `gas`. Alias the field name if you prefer. See: https://graphql.org/learn/queries/#aliases",
        "arguments": []
      },
      {
        "name": "value",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`value` is the Ether value (in wei) sent along with this transaction.",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "inputData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`inputData` is the data supplied to the target contract of the transaction. It is sometimes named `input` elsewhere.",
        "arguments": []
      },
      {
        "name": "input",
        "type": {
          "reqType": true,
          "name": "Inputs"
        },
        "description": "`input` is the data supplied to the target contract of the transaction. It contains the raw data and the decoded data (will be null if it wasn't possible to decode it)",
        "arguments": []
      },
      {
        "name": "method",
        "type": {
          "reqType": true,
          "name": "Method"
        },
        "description": "The Method object with method signature in hex and text.",
        "arguments": []
      },
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`hash` is the hash of this transaction. It is also a universally unique pointer to this transaction.",
        "arguments": []
      },
      {
        "name": "from",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`from` is the account that sent this transaction - this will always be an externally owned account in the context of this object.",
        "arguments": []
      },
      {
        "name": "signature",
        "type": {
          "reqType": true,
          "name": "Signature"
        },
        "description": "`signature` holds the V, R and S values representing the cryptographic signature for this transaction. It is based on these values that the `from` address is derived",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTraceConnection",
    "hideChildren": true,
    "description": "The Connection type for a TransactionTrace",
    "fields": [
      {
        "name": "edges",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "TransactionTraceEdge"
        },
        "description": "A list of edges to transaction traces",
        "arguments": []
      },
      {
        "name": "pageInfo",
        "type": {
          "reqType": true,
          "name": "PageInfo"
        },
        "description": "Information to aid pagination",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTraceEdge",
    "hideChildren": true,
    "description": "A single transaction trace response.\n\nWARNING: when doing forward streaming searches, do NOT forget to include the `undo` field to determine if the message is actually a REVERSAL of the transaction.\n\nNOTE: always check the value of `node.status` to make sure it is successfully executed before assuming it is.",
    "fields": [
      {
        "name": "undo",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Query cursor, allowing you to continue fetching results even after interruption of your connection, without missing a beat.",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "reqType": true,
          "name": "BlockRefWithHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "The transaction trace object.",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTrace",
    "hideChildren": true,
    "description": "Traces of the execution of a given transaction. This means the\ntransaction was executed on the chain. You also get context about the\nblock in which it was executed, and the status of the execution.\n\nWARN: Make sure to always check the `status` to make sure you're not\nconsidering a failed transaction as if it was successful.",
    "fields": [
      {
        "name": "to",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`to` is the recipient address of a transfer, or target contract of a call.\n\nNOTE: this field will *always* be set, even when the transaction creates a contract.  To distinguish contract creations, use the `create` field.",
        "arguments": []
      },
      {
        "name": "nonce",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`nonce` is an ever incrementing counter of transactions issued by the `from` account.",
        "arguments": []
      },
      {
        "name": "gasPrice",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`gasPrice` is the price offered to miners for gas, in wei per unit. You can encode it differently with the `encoding` parameter.",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "gasLimit",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`gasLimit` is the maximum amount of gas this transaction can consume. Other Ethereum nodes often name this field simply `gas`. Alias the field name if you prefer. See: https://graphql.org/learn/queries/#aliases",
        "arguments": []
      },
      {
        "name": "value",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`value` is the Ether value (in wei) sent along with this transaction.",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "inputData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`inputData` is the data supplied to the target contract of the transaction. It is sometimes named `input` elsewhere.",
        "arguments": []
      },
      {
        "name": "input",
        "type": {
          "reqType": true,
          "name": "Inputs"
        },
        "description": "`input` is the data supplied to the target contract of the transaction. It contains the raw data and the decoded data (will be null if it wasn't possible to decode it)",
        "arguments": []
      },
      {
        "name": "method",
        "type": {
          "reqType": true,
          "name": "Method"
        },
        "description": "The Method object with method signature in hex and text.",
        "arguments": []
      },
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`hash` is the hash of this transaction. It is also a universally unique pointer to this transaction.",
        "arguments": []
      },
      {
        "name": "from",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`from` is the account that sent this transaction - this will always be an externally owned account in the context of this object.",
        "arguments": []
      },
      {
        "name": "signature",
        "type": {
          "reqType": true,
          "name": "Signature"
        },
        "description": "`signature` holds the V, R and S values representing the cryptographic signature for this transaction. It is based on these values that the `from` address is derived",
        "arguments": []
      },
      {
        "name": "status",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATUS"
        },
        "description": "`status` shows if the transaction was successful, failed or was reverted.  You have the details on the Calls as to which execution is responsible for the failure, and traces up to that point.",
        "arguments": []
      },
      {
        "name": "gasUsed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`gasUsed` is the quantity of gas units that was consumed processing this transaction.",
        "arguments": []
      },
      {
        "name": "cumulativeGasUsed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`cumulativeGasUsed` is the quantity of gas units that was consumed processing this transaction plus all the gas units user by all the transaction before this one in the block.",
        "arguments": []
      },
      {
        "name": "publicKey",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "TODO: detail, which type of encoding.. and is it even present?",
        "arguments": []
      },
      {
        "name": "index",
        "type": {
          "reqType": true,
          "name": "Int"
        },
        "description": "`index` is the 0-based index of this transaction's execution within the block. TODO: REVIEW",
        "arguments": []
      },
      {
        "name": "create",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "`create` is true when the transaction represents a contract deployment",
        "arguments": []
      },
      {
        "name": "outcome",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "name": "BlockRefWithHeader"
        },
        "description": "`block` is the block in which this transaction was mined.",
        "arguments": []
      },
      {
        "name": "allLogs",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "EventLog"
        },
        "description": "`allLogs` is a list of all log events within the transaction, flattened and ordered by execution time.",
        "arguments": []
      },
      {
        "name": "flatCalls",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "Call"
        },
        "description": "Lists all calls, flattened and ordered by execution time.",
        "arguments": []
      },
      {
        "name": "matchingCalls",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "Call"
        },
        "description": "Returns a flattened list of calls, in _execution_ order, of only the matching elements (from a search, or other filtering).",
        "arguments": []
      },
      {
        "name": "matchingLogs",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "EventLog"
        },
        "description": "Returns a flattened list of logs, in _execution_ order, of only the matching elements (from a search, or other filtering).",
        "arguments": []
      }
    ]
  },
  {
    "name": "Signature",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "v",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "r",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "s",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionReceipt",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "stateRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "cumulativeGasUsed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "logsBloom",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "logs",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "EventLog"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Call",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "index",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "parentIndex",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "depth",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "callType",
        "type": {
          "reqType": true,
          "name": "CALL_TYPE"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "from",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`from` is the address of the caller that will",
        "arguments": []
      },
      {
        "name": "to",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`to` is the address of the contract being executed",
        "arguments": []
      },
      {
        "name": "value",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "gasConsumed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`gasConsumed` is the amount of gas **specifically** consumed by this call. We use the term **specifically** since for transaction call (i.e. the first call), it does not include implicit transaction gas cost.",
        "arguments": []
      },
      {
        "name": "gasLimit",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`gasLimit` is the maximum gas value **specifically** set by this call. We use the term **specifically** since for transaction call (i.e. the first call), this limit here will be reduced by the implicit transaction gas cost.",
        "arguments": []
      },
      {
        "name": "status",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATUS"
        },
        "description": "`status` represents the outcome of the execution of this Call",
        "arguments": []
      },
      {
        "name": "failureCause",
        "type": {
          "name": "String"
        },
        "description": "Defines the cause of the failure. Will be set only when `status` is either `REVERTED` or `FAILED`. The reason is a free form string extracted from the Ethereum node that executed the call.\n\nIMPORTANT: This field has no backward policy and the value could change at any moment. Use it for logging purposes, direct user display, debugging help etc. Use it for logic decisions at your own risk.",
        "arguments": []
      },
      {
        "name": "inputData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`inputData` is the data supplied to the target contract of the transaction. It is sometimes named `input` elsewhere.",
        "arguments": []
      },
      {
        "name": "input",
        "type": {
          "reqType": true,
          "name": "Inputs"
        },
        "description": "`input` is the data supplied to the target contract of the transaction. It contains the raw data and the decoded data (will be null if it wasn't possible to decode it)",
        "arguments": []
      },
      {
        "name": "method",
        "type": {
          "reqType": true,
          "name": "Method"
        },
        "description": "The Method object with method signature in hex and text.",
        "arguments": []
      },
      {
        "name": "returnData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "storageChanges",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "StorageChange"
        },
        "description": "",
        "arguments": [
          {
            "name": "includeReverted",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": ""
          }
        ]
      },
      {
        "name": "balanceChanges",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "BalanceChange"
        },
        "description": "",
        "arguments": [
          {
            "name": "includeReverted",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": ""
          }
        ]
      },
      {
        "name": "logs",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "EventLog"
        },
        "description": "",
        "arguments": [
          {
            "name": "includeReverted",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": ""
          }
        ]
      },
      {
        "name": "analyze",
        "type": {
          "name": "Analyzed"
        },
        "description": "Provide a higher-level view of the call based on an analysis (ex. ERC20 Transfers) of its decoded data (input, output & logs).",
        "arguments": []
      }
    ]
  },
  {
    "name": "ERC20Transfer",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "address",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "from",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "to",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "amount",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "AMOUNT_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "name",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "symbol",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "decimals",
        "type": {
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "reverted",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Inputs",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "data",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "json",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "InputParameter"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "InputParameter",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "type",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "name",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "value",
        "type": {
          "reqType": true,
          "name": "JSON"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "BalanceChange",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "address",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "oldValue",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "newValue",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "reason",
        "type": {
          "reqType": true,
          "name": "BALANCE_CHANGE_REASON"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "StorageChange",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "key",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "address",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "oldValue",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "newValue",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "EventLog",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "address",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "topics",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "data",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "blockIndex",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "transactionIndex",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockRefWithHeader",
    "hideChildren": true,
    "description": "`BlockRefWithHeader` is an object that refers to a block and contains its header. Think of it as an incomplete `Block` object.",
    "fields": [
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hash (or ID) of this block. It is a unique pointer to this block.",
        "arguments": []
      },
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Sequential number of this block on the chain. Unlike the hash, it is not unique because of forked blocks.",
        "arguments": []
      },
      {
        "name": "header",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Block",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hash (or ID) of this block. It is a unique pointer to this block.",
        "arguments": []
      },
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Sequential number of this block on the chain. Unlike the hash, it is not unique because of forked blocks.",
        "arguments": []
      },
      {
        "name": "size",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "header",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "uncles",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "List of the block header of the uncles (ommers) of this block",
        "arguments": []
      },
      {
        "name": "transactions",
        "type": {
          "reqType": true,
          "name": "TransactionConnection"
        },
        "description": "List of transactions contained in this block with pagination parameters following the standard GraphQL connection model",
        "arguments": [
          {
            "name": "first",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "last",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "before",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "after",
            "type": {
              "name": "String"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "BlockHeader",
    "hideChildren": true,
    "description": "Header of an Ethereum block",
    "fields": [
      {
        "name": "parentHash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hash of the parent block",
        "arguments": []
      },
      {
        "name": "unclesHash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "coinbase",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Address of the block miner",
        "arguments": []
      },
      {
        "name": "stateRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hash of the state trie’s root node",
        "arguments": []
      },
      {
        "name": "transactionsRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "receiptRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "logsBloom",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Bloom Filter, used to optimize searching for transactions inside this block",
        "arguments": []
      },
      {
        "name": "difficulty",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Sequential number of this block on the chain. Unlike the hash, it is not unique because of forked blocks.",
        "arguments": []
      },
      {
        "name": "gasLimit",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Maximum amount of gas allowed in a block (determines how many transactions can fit into it)",
        "arguments": []
      },
      {
        "name": "gasUsed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Total amount of gas used during execution of all transactions",
        "arguments": []
      },
      {
        "name": "timestamp",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Timestamp of the mining of that block",
        "arguments": []
      },
      {
        "name": "extraData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Arbitrary data injected by the miner of this block",
        "arguments": []
      },
      {
        "name": "mixHash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "nonce",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Proof of work nonce - The random value in a block that was used get the proof of work satisfied",
        "arguments": []
      },
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hash (or ID) of this block. It is a unique pointer to this block.",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockEdge",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "undo",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this response is an UNDO operation of a previously sent response.\n\nMake sure you catch this and always verify its value, as to not double/triple count blocks.",
        "arguments": []
      },
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Stream cursor, allowing you to continue fetching results even after interruption of your connection, without missing a beat.",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "name": "MinedBlock"
        },
        "description": "The block object.",
        "arguments": []
      }
    ]
  },
  {
    "name": "MinedBlock",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Hash (or ID) of this block. It is a unique pointer to this block.",
        "arguments": []
      },
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "Sequential number of this block on the chain. Unlike the hash, it is not unique because of forked blocks.",
        "arguments": []
      },
      {
        "name": "size",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "header",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "uncles",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "List of the block header of the uncles (ommers) of this block",
        "arguments": []
      },
      {
        "name": "uncles",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "transactionTraces",
        "type": {
          "reqType": true,
          "name": "TransactionTraceConnection"
        },
        "description": "List of transaction traces contained in this block with pagination parameters following the standard GraphQL connection model",
        "arguments": [
          {
            "name": "first",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "last",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "before",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "after",
            "type": {
              "name": "String"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "TransactionState",
    "hideChildren": true,
    "description": "A single Transaction State response.",
    "fields": [
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`hash` is the hash of this transaction. It is also a universally unique pointer to this transaction.",
        "arguments": []
      },
      {
        "name": "previousState",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATE"
        },
        "description": "previousState is the previous of the transaction. When the stream is initiated this will be UNKNOWN",
        "arguments": []
      },
      {
        "name": "currentState",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATE"
        },
        "description": "currentState is the current known state of the transaction.",
        "arguments": []
      },
      {
        "name": "transitionName",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_TRANSITION"
        },
        "description": "transitionName is the current transition of the transaction.",
        "arguments": []
      },
      {
        "name": "transition",
        "type": {
          "name": "TrackerTransition"
        },
        "description": "transition holds the details of the specific transition. This can be one of the following types based on the specific transition:\n- TrxTransitionInit\n- TrxTransitionPooled\n- TrxTransitionSpeculativelyExecuted\n- TrxTransitionMined\n- TrxTransitionForked\n- TrxTransitionConfirmed\n- TrxTransitionReplaced",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionInit",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "transaction",
        "type": {
          "name": "Transaction"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "blockHeader",
        "type": {
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "trace",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "confirmations",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "replacedById",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionPooled",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "transaction",
        "type": {
          "name": "Transaction"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionSpeculativelyExecuted",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "blockHeader",
        "type": {
          "name": "BlockHeader"
        },
        "description": "blockHeader is the block on which the transaction was speculatively executed",
        "arguments": []
      },
      {
        "name": "trace",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionMined",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "blockHeader",
        "type": {
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "trace",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "confirmations",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionForked",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "transaction",
        "type": {
          "name": "Transaction"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionConfirmed",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "confirmations",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionReplaced",
    "hideChildren": true,
    "description": "",
    "fields": [
      {
        "name": "replacedById",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  }
]